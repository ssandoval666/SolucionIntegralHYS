@section HeadBlock {
	<link rel="stylesheet" media="screen, print" href="~/css/datagrid/datatables/datatables.bundle.css">
	<link rel="stylesheet" media="screen, print" href="~/css/theme-demo.css">
}

<div class="row">
	<div class="col-xl-12">
		<div id="panel-1" class="panel">			
			<div class="panel-container show">
				<div class="panel-content">
					<div class="tab-content pt-4">
						<div class="tab-pane fade show active" id="tab_default-1" role="tabpanel">
							<div class="row">
								<div class="col-xl-12">
									<table id="dt-basic-example" class="table table-bordered table-hover table-striped w-100"></table>
								</div>
							</div>
						</div>
						<div class="tab-pane fade" id="tab_default-2" role="tabpanel">
							<div class="alert alert-info">
								<strong>
									IE Support
								</strong>
								<br>
								The latest update for Alt-Editor has dropped support for IE in general. We have included the latest version of Alt-editor (catered for SmartAdmin) inside <code>src/custom/plugins/datatables-alteditor/datatables-alteditor-latest.js</code> found only in the HTML flavor. You may switch to this latest version of Alt editor to gain access to the <strong>Support Modifiers</strong> below.
							</div>
							<div class="row">
								<div class="col-12">
									<table class="table table-bordered table-striped">
										<thead>
											<tr>
												<th>Column option</th>
												<th>Accepted values</th>
												<th>Description</th>
											</tr>
										</thead>
										<tbody>
											<tr>
												<td><code>type</code></td>
												<td><code>"text" | "select" | "hidden" | ...</code></td>
												<td>Type of HTML input to be shown. The value <code>readonly</code> is accepted for backward compatibility, but deprecated.</td>
											</tr>
											<tr>
												<td><code>readonly</code></td>
												<td><code>true | false</code></td>
												<td>Add <code>readonly</code> HTML attribute</td>
											</tr>
											<tr>
												<td><code>disabled</code></td>
												<td><code>true | false</code></td>
												<td>Add <code>disabled</code> HTML attribute</td>
											</tr>
											<tr>
												<td><code>required</code></td>
												<td><code>true | false</code></td>
												<td>Add <code>required</code> HTML attribute</td>
											</tr>
											<tr>
												<td><code>hoverMsg</code></td>
												<td><code>"some msg"</code></td>
												<td>The message will appear as a tooltip over the input field.</td>
											</tr>
											<tr>
												<td><code>unique</code></td>
												<td><code>true | false</code></td>
												<td>Ensure that no two rows have the same value. The check is performed client side, not server side. Set HTML <code>"data-unique"</code> attribute. (Probably there's some issue with this).</td>
											</tr>
											<tr>
												<td><code>uniqueMsg</code></td>
												<td><code>"some msg"</code></td>
												<td>An error message that is displayed when the unique constraint is not respected. Set HTML <code>"data-uniqueMsg"</code> attribute.</td>
											</tr>
											<tr>
												<td><code>special</code></td>
												<td><code>"any string"</code></td>
												<td>Set HTML <code>"data-special"</code> attribute (don't know what's that needed for).</td>
											</tr>
											<tr>
												<td><code>editorOnChange</code></td>
												<td>function</td>
												<td>Custom onchange function. It will take as arguments the jquery event and the altEditor object.</td>
											</tr>
											<tr>
												<td colspan="3" class="py-4"><strong>Options for columns with type <code>"text"</code>:</strong></td>
											</tr>
											<tr>
												<td><code>pattern</code></td>
												<td><code>r.e.</code></td>
												<td>The typed text will be matched against given regular expression, before submit.</td>
											</tr>
											<tr>
												<td><code>msg</code></td>
												<td><code>"some msg"</code></td>
												<td>An error message that is displayed in case pattern is not matched. Set HTML <code>"data-errorMsg"</code> attribute.</td>
											</tr>
											<tr>
												<td><code>maxLength</code></td>
												<td><code>integer</code></td>
												<td>Set HTML <code>"maxlength"</code> attribute.</td>
											</tr>
											<tr>
												<td><code>datepicker</code></td>
												<td><code>{}</code></td>
												<td>Enable a datepicker component. jQuery-UI plugin must be linked. More datepicker configuration options may be passed within the object.</td>
											</tr>
											<tr>
												<td><code>datetimepicker</code></td>
												<td><code>{}</code></td>
												<td>Enable a datetimepicker component. jQuery datetimepicker plugin must be linked. More datetimepicker configuration options may be passed within the object.</td>
											</tr>
											<tr>
												<td colspan="3" class="py-4"><strong>Options for columns with type <code>"select"</code>:</strong></td>
											</tr>
											<tr>
												<td><code>options</code></td>
												<td><code>["a", "b", "c"]</code>  or <code>{"a":"A", "b":"B", "c":"C"}</code></td>
												<td>The options that shall be presented.</td>
											</tr>
											<tr>
												<td><code>select2</code></td>
												<td><code>{}</code></td>
												<td>Enable a select2 component. Select2 jQuery plugin must be linked. More select2 configuration options may be passed within the object.</td>
											</tr>
											<tr>
												<td><code>multiple</code></td>
												<td><code>true | false</code></td>
												<td>Set HTML <code>"multiple"</code> attribute.</td>
											</tr>
											<tr>
												<td colspan="3" class="py-4"><strong>Options for columns with type <code>"textarea"</code>:</strong></td>
											</tr>
											<tr>
												<td><code>rows</code></td>
												<td><code>integer</code></td>
												<td>Set HTML <code>"rows"</code> attribute.</td>
											</tr>
											<tr>
												<td><code>cols</code></td>
												<td><code>integer</code></td>
												<td>Set HTML <code>"cols"</code> attribute.</td>
											</tr>
										</tbody>
									</table>
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>
@section ScriptsBlock {
	<script src="~/js/datagrid/datatables/datatables.bundle.js"></script>
	<script>
		var RootUrl = '@Url.Content("~/")';

		$(document).ready(function () {
			/*
			NOTES:
				Column id
				---------------------------------------------------
				Please always keep in mind that DataTable framework allows two different kinds of "rows": Arrays and Objects. In first case columns are indexed through integers; in second case columns are indexed by their attribute name. Usually JSON's use the Object approach, but we cannot be sure.
				Row key
				---------------------------------------------------
				There is no default key in the table. Inside your callback functions, probably you will need a row key to build URL's, in that case you can get them from the rowdata parameter.
			COLUMN DEFINITIONS:
				title = "string" - title name on table header th and on form labels
				---------------------------------------------------
				id = "string" - id assigned to imput element when editing/adding in modal
				---------------------------------------------------
				data = "string"  - data name from the dataset
				---------------------------------------------------
				type = "text" | "select" | "hidden" | "readonly"  - Type of HTML input to be shown.
				---------------------------------------------------
				hoverMsg = "some msg" - The message will appear as a tooltip over the input field.
				---------------------------------------------------
				pattern = r.e.  - If type is "input", the typed text will be matched against given regular expression, before submit.
				---------------------------------------------------
				msg = "some string" - An error message that is displayed in case pattern is not matched. Set HTML "data-errorMsg" attribute.
				---------------------------------------------------
				maxLength = integer - If type is "input", set HTML "maxlength" attribute.
				---------------------------------------------------
				options = ["a", "b", "c"] - If type is "select", the options that shall be presented.
				---------------------------------------------------
				select2 = {} - If type is "select", enable a select2 component. Select2 jQuery plugin must be linked. More select2 configuration options may be passed within the array.
				---------------------------------------------------
				datepicker = {} - If type is "text", enable a datepicker component. jQuery-UI plugin must be linked. More datepicker configuration options may be passed within the array.
				---------------------------------------------------
				multiple = true | false - Set HTML "multiple" attribute (for use with select2).
				---------------------------------------------------
				unique = true | false - Ensure that no two rows have the same value. The check is performed client side, not server side. Set HTML "data-unique" attribute. (Probably there's some issue with this).
				---------------------------------------------------
				uniqueMsg = "some string" - An error message that is displayed when the unique constraint is not respected. Set HTML "data-uniqueMsg" attribute.
				---------------------------------------------------
				special = "any string" - Set HTML "data-special" attribute (don't know what's that needed for).
				---------------------------------------------------
				defaultValue = "any string" - Adds a default value when adding a row
				---------------------------------------------------
			*/
			// Column Definitions
			var columnSet = [
				{
					title: "DNI",
					id: "documento",
					data: "documento",
					type: "text",
					required: true
				}]
			/* start data table */

			//var ss = "{'recordsTotal':'4','data':[{'Documento':'96271118'},{'Documento':'40426881'},{'Documento':'37027188'},{'Documento':'29041449'}]}"
			
			var myTable = $('#dt-basic-example').dataTable({
				/* check datatable buttons page for more info on how this DOM structure works */
				ajax: {
					url: "@Url.Action("GetConstancias", "ConstanciasCapacitaciones")"
					,	dataSrc: ''
				},
				processing: true,
				serverSide: true,
				columns: columnSet,
				/* selecting multiple rows will not work */
				select: 'single',
				/* altEditor at work */
				altEditor: true,
				responsive: true,
				/* buttons uses classes from bootstrap, see buttons page for more details */
				buttons: [
					{
						extend: 'selected',
						text: '<i class="@(Settings.Theme.IconPrefix) fa-times mr-1"></i> Delete',
						name: 'delete',
						className: 'btn-primary btn-sm mr-1'
					},
					{
						extend: 'selected',
						text: '<i class="@(Settings.Theme.IconPrefix) fa-edit mr-1"></i> Edit',
						name: 'edit',
						className: 'btn-primary btn-sm mr-1'
					},
					{
						text: '<i class="@(Settings.Theme.IconPrefix) fa-plus mr-1"></i> Add',
						name: 'add',
						className: 'btn-success btn-sm mr-1'
					}
				],
				
				/* default callback for insertion: mock webservice, always success */
				onAddRow: function (dt, rowdata, success, error) {
					console.log("Missing AJAX configuration for INSERT");
					success(rowdata);
					},
				onEditRow: function (dt, rowdata, success, error) {
					console.log("Missing AJAX configuration for UPDATE");
					success(rowdata);
					},
				onDeleteRow: function (dt, rowdata, success, error) {
					console.log("Missing AJAX configuration for DELETE");
					success(rowdata);
					},
			});
		});
	</script>
}

